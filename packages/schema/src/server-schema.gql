# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""artifact contains the information of all bundled static files."""
type Artifact {
  id: Int!

  """artifact name"""
  name: String!

  """git commit hash"""
  hash: String!

  """git branch"""
  branch: String!

  """user uploaded the build"""
  issuer: String!

  """the build file key in storage"""
  buildKey: String! @deprecated(reason: "use `buildLink` instead")

  """status of bundle analyzing progress"""
  status: BundleJobStatus!

  """reason for failed analyzing"""
  failedReason: String

  """the report file key in storage"""
  reportKey: String @deprecated(reason: "use `reportLink` instead")

  """the content file key in storage"""
  contentKey: String @deprecated(reason: "use `contentLink` instead")

  """total size introduced by build, report and content files, in bytes"""
  uploadSize: Int!

  """bundle audit score"""
  score: Int

  """time spent to analyze the build"""
  duration: Int!

  """version of the tool for uploading the build"""
  appVersion: String!

  """toolkit used to build the bundle"""
  toolkit: String

  """artifact created timestamp"""
  createdAt: DateTime!

  """artifact updated timestamp"""
  updatedAt: DateTime!

  """baseline artifact"""
  baseline: Artifact

  """all entry points of given artifact"""
  entrypoints: [ArtifactEntrypoint!]
  version: AppVersion

  """the link to uploaded build tar file"""
  buildLink: String!

  """the link to build analysis report file"""
  reportLink: String

  """the link to module reference detail of a build"""
  contentLink: String
}

enum BundleJobStatus {
  Pending
  Running
  Passed
  Failed
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FileSize {
  raw: Int!
  gzip: Int!
  brotli: Int!
}

"""brief history data of artifact per entrypoint"""
type ArtifactEntrypoint {
  """git branch"""
  branch: String!

  """git commit hash"""
  hash: String!

  """artifact name"""
  artifactName: String!

  """entrypoint name"""
  entrypoint: String!

  """total size of the entrypoint"""
  size: FileSize!

  """total initial size of the entrypoint"""
  initialSize: FileSize!

  """total size of the baseline entrypoint"""
  baselineSize: FileSize

  """total initial size of the baseline entrypoint"""
  baselineInitialSize: FileSize

  """bundle audit score"""
  score: Int

  """artifact created timestamp"""
  createdAt: DateTime!
  artifactId: Int
}

type UsagePack {
  id: Int!

  """name of the usage pack"""
  name: String!
  desc: String!

  """whether the usage pack is public"""
  isPublic: Boolean!

  """whether the usage pack is default"""
  isDefault: Boolean!

  """job count quota within one month, -1 means no limit"""
  jobCountMonthly: Int!

  """
  job cost duration time quota within one month, in minute, -1 means no limit
  """
  jobDurationMonthly: Int!

  """total storage quota, in MB, -1 means no limit"""
  storage: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Project {
  """
  project unique id, contains only lowercase letters "a-z", numbers "0-9", hyphen "-", underscore "_"
  """
  id: ID!

  """repository namespace"""
  namespace: String!

  """repository name"""
  name: String!

  """repository remote host"""
  host: GitHost!

  """artifact baseline branch name"""
  artifactBaselineBranch: String!

  """is the project public to everyone"""
  isPublic: Boolean!

  """project created timestamp"""
  createdAt: DateTime!

  """authorized users of this project"""
  authorizedUsers: [UserWithPermission!]!

  """if this project has packages uploaded"""
  hasPackages: Boolean!

  """current user permission to this project"""
  userPermission: [Permission!]!

  """get artifact by id"""
  artifact(
    """artifact id"""
    id: Int!
  ): Artifact!
  artifactNames: [String!]!

  """get artifacts by git commit hash"""
  artifactByCommit(
    """git commit hash to match"""
    hash: String!
  ): Artifact @deprecated(reason: "use artifacts(hash: $hash)")

  """paginated artifact of given project"""
  artifacts(
    pagination: PaginationInput = {first: 10}

    """git branch filter"""
    branch: String

    """name filter"""
    name: String

    """hash filter"""
    hash: String
  ): PaginatedArtifacts!

  """all artifact historical data"""
  artifactHistory(
    from: DateTime
    to: DateTime

    """max length of records returned"""
    length: Int

    """branch filter"""
    branch: String = "master"

    """name filter"""
    name: String

    """is baseline"""
    isBaseline: Boolean
  ): [ArtifactEntrypoint!]!
  artifactCount: Int!
  recentBranches: [String!]!

  """get app versions by project"""
  appVersions(
    from: DateTime
    to: DateTime

    """max length of records returned"""
    length: Int
  ): [AppVersion!]!

  """get app versions by hash"""
  appVersion(hash: String!): AppVersion!
  job(jobType: JobType!, entityId: Int!): Job!

  """time usage information of project"""
  timeUsage(input: TimeUsageInput!): TimeUsage!

  """project usage"""
  usage: ProjectUsage!

  """project usage pack"""
  usagePack: UsagePack!

  """get project settings"""
  setting: Setting!

  """paginated packages for given project"""
  packages(
    pagination: PaginationInput = {first: 10}

    """name filter"""
    name: String
  ): PaginatedPackages!

  """get package by id"""
  package(
    """package id"""
    id: Int!
  ): Package!

  """snapshot detail"""
  snapshot(snapshotId: Int!): Snapshot!

  """paginated snapshots"""
  snapshots(
    pagination: PaginationInput = {first: 10}
    trigger: SnapshotTrigger

    """Git commit hash filter"""
    hash: String

    """only returns snapshots that has commit hash related"""
    hashRequired: Boolean
  ): PaginatedSnapshots!
  snapshotCount: Int!

  """latest snapshot detail"""
  latestSnapshot(from: DateTime, to: DateTime): Snapshot

  """All pages created in project"""
  pages: [Page!]!

  """pageId with profileIds, envIds, competitorIds"""
  pageRelations: [PageRelation!]!

  """pageId with profileIds and envIds"""
  pingResult(pageId: Int!): [PingResult!]!
  snapshotReport(reportId: Int!): SnapshotReport!

  """get snapshot reports with filters"""
  snapshotReports(filter: SnapshotReportFilter!): [SnapshotReport!]!

  """paginated source issues"""
  sourceIssues(
    pagination: PaginationInput = {first: 10}

    """git commit hash"""
    hash: String
  ): PaginatedSourceIssues!

  """all versions that have source issues in recent 3 months"""
  issueCommits: [String!]!
  sourceIssueById(issueId: Int!): SourceIssue

  """all environments in the project"""
  environments: [Environment!]!

  """all profiles in the project"""
  profiles: [Profile!]!

  """get project schedule task setting"""
  timer: Timer
  authorizedApplications: [ProjectAuthorizedApplicationsNode!]!

  """All webhooks in project"""
  webhooks: [Webhook!]!

  """bundle min,max,average score"""
  bundleScores(from: DateTime!, to: DateTime!): ScoreItem!

  """the metrics of snapshot report"""
  labAvgMetrics(from: DateTime!, to: DateTime!): AvgMetricType!

  """the oldest & latest artifacts"""
  artifactRecords(from: DateTime!, to: DateTime!, isBaseline: Boolean): [Artifact!]

  """the oldest & latest snapshot"""
  snapshotRecords(from: DateTime!, to: DateTime!): [Snapshot!]
}

enum GitHost {
  Unknown
  Github
  Gitlab
}

enum Permission {
  Admin
  Read
}

input PaginationInput {
  """returns the first n elements from the list."""
  first: Int = 10

  """ignore the first n elements from the list."""
  skip: Int = 0

  """returns the elements in the list that come after the specified cursor."""
  after: String
}

"""available job types"""
enum JobType {
  All
  BundleAnalyze
  PackageAnalyze
  LabAnalyze
  E2EAnalyze
  SourceAnalyze
  LabPing
}

input TimeUsageInput {
  """The start of the time range"""
  from: DateTime!

  """The end of the time range"""
  to: DateTime!
}

enum SnapshotTrigger {
  Api
  Scheduler
}

input SnapshotReportFilter {
  """
  only return result with id in given snapshot report ids. If `ids` is set, all other filter options will be ignored
  """
  ids: [Int!]
  envId: Int
  profileId: Int
  pageId: Int
  from: DateTime
  to: DateTime
  length: Int
  withCompetitor: Boolean
  hash: String
}

"""a group of page performance reports"""
type Snapshot {
  id: Int!

  """snapshot created timestamp"""
  createdAt: DateTime!

  """snapshot job start time"""
  startedAt: DateTime

  """snapshot job status"""
  status: SnapshotStatus!

  """snapshot job failure reason"""
  failedReason: String

  """snapshot creator"""
  issuer: String

  """git commit hash"""
  hash: String

  """snapshot title"""
  title: String

  """by which the snapshot triggered"""
  trigger: SnapshotTrigger!

  """get reports with given snapshot id"""
  snapshotReports: [SnapshotReport!]!
  snapshotReport(reportId: Int!): SnapshotReport!
}

enum SnapshotStatus {
  Pending
  Running
  Completed
  Scheduled
  Failed
}

"""page performance report"""
type SnapshotReport {
  id: Int!

  """report created timestamp"""
  createdAt: DateTime!

  """job status"""
  status: SnapshotStatus!

  """
  lighthouse result key in storage, you may fetch the result with this key from storage service
  """
  lighthouseStorageKey: String @deprecated(reason: "use `reportLink` instead")

  """
  screen cast key in storage, you may fetch screen cast with this key from storage service
  """
  screencastStorageKey: String @deprecated(reason: "use `screencastLink` instead")

  """
  flame chart raw data key in storage, you may fetch flame chart detail with this key from storage service
  """
  flameChartStorageKey: String @deprecated(reason: "use `flameChartLink` instead")

  """
  source coverage data key in storage, you may fetch flame chart detail with this key from storage service
  """
  sourceCoverageStorageKey: String @deprecated(reason: "use `sourceCoverageLink` instead")

  """Source job status, null if there is no source job"""
  sourceStatus: SourceStatus

  """key metrics data"""
  metrics: JSON!

  """failure reason if report job failed"""
  failedReason: String

  """lighthouse performance score"""
  performanceScore: Int

  """only exists in dynamic host jobs"""
  host: String

  """total size of files uploaded to storage in this report, in bytes"""
  uploadSize: Int!

  """the environment this report used"""
  environment: Environment!

  """the profile this report used"""
  profile: Profile!

  """the page this report used"""
  page: Page!

  """the snapshot of this report"""
  snapshot: Snapshot!

  """found performance issues"""
  issues: [SourceIssue!]!

  """artifacts used in this report"""
  artifacts: [Artifact!]

  """the link to snapshot report detail file"""
  reportLink: String

  """the link to snapshot report screencast file"""
  screencastLink: String

  """the link to snapshot report flame Chart data file"""
  flameChartLink: String

  """the link to snapshot report source coverage data file"""
  sourceCoverageLink: String

  """the link to snapshot report react profile data file"""
  reactProfileLink: String

  """the link to statistics from source analysis"""
  sourceAnalyzeStatisticsLink: String
}

enum SourceStatus {
  Pending
  Running
  Completed
  Failed
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type User {
  username: String!
  email: String!
  firstName: String
  lastName: String
  avatarUrl: String

  """issue created timestamp"""
  createdAt: DateTime!

  """is application"""
  isApp: Boolean!
  isAdmin: Boolean!
  starredProjects: [ID!]!
  connectedAccounts: [Account!]!
  accessTokens: [AccessToken!]!
}

type Application {
  username: String!
  avatarUrl: String

  """issue created timestamp"""
  createdAt: DateTime!
  id: Int!

  """projects that application can access"""
  authorizedProjects: [ApplicationAuthorizedProjectsNode!]!
  webhooks: [Webhook!]!
}

type ApplicationSettings {
  enableSignup: Boolean!
  enableOauth: Boolean!
  enableProjectCreate: Boolean!
  enableProjectDelete: Boolean!
  enableProjectImport: Boolean!
  usePendingJobTable: Boolean!
  registrationToken: String!
  oauthProviders: [ExternalAccount!]!
}

enum ExternalAccount {
  github
}

type HeaderType {
  key: String!
  value: String!
  host: String!
}

type LocalStorageType {
  key: String!
  value: String!
}

type CookieType {
  name: String!
  value: String!
  domain: String
  path: String
  httpOnly: Boolean!
  secure: Boolean!
  expire: String
  sameSite: String!
}

"""project page asset"""
type Page {
  id: Int!

  """page alias name"""
  name: String!

  """page url"""
  url: String!

  """is competitor page"""
  isCompetitor: Boolean!

  """is temporary page"""
  isTemp: Boolean!

  """is e2e test"""
  isE2e: Boolean!

  """e2e script"""
  e2eScript: String

  """Disable scanning of this page"""
  disable: Boolean!
}

"""device information used to measure pages"""
type Profile {
  id: Int!

  """profile alias name"""
  name: String!

  """simulator device name"""
  device: String!

  """bandwidth limit"""
  bandWidth: String!

  """Enable react prfiling"""
  reactProfiling: Boolean!

  """Disable scanning of this profile"""
  disable: Boolean!

  """Enable http2 + https proxy server"""
  enableProxy: Boolean!
}

"""environment used to measure pages"""
type Environment {
  id: Int!

  """environment alias name"""
  name: String!

  """the geo location where the related pages should be audited at"""
  zone: String!

  """extra cookies add to requests"""
  cookies: [CookieType!]!

  """extra headers add to requests"""
  headers: [HeaderType!]!

  """
  tells whether this environment could be used in temporary pages and competitor pages auditing
  """
  isCompetitor: Boolean! @deprecated(reason: "No need to use it")

  """Filtering environments when executing timed reminder tasks"""
  needReminder: Boolean!

  """Disable scanning of this environment"""
  disable: Boolean!

  """extra localStorage value inserted into page"""
  localStorage: [LocalStorageType!]

  """login script"""
  loginScript: String
}

"""message target setting"""
type MessageTarget {
  userEmails: [String!]!
}

"""project setting"""
type Setting {
  """what kind of source of bundle message would be sent"""
  bundleMessageSource: BundleMessageSource!

  """what kind of bundle message would be sent"""
  bundleMessageFilter: BundleMessageFilter!

  """branches where message should be sent if"""
  bundleMessageBranches: [String!]!

  """deprecated"""
  autoDetectVersion: Boolean! @deprecated(reason: "useless, enabled by default for all projects")

  """what kind of lab message would be sent"""
  labMessageSource: LabMessageSource!

  """what kind of chat will receive message"""
  messageTargetType: MessageTargetType!

  """who will receive message if target type is specified"""
  messageTarget: MessageTarget!
}

enum BundleMessageSource {
  All
  Branch
}

enum BundleMessageFilter {
  All
  Warning
  None
}

enum LabMessageSource {
  All
  Warning
  None
}

enum MessageTargetType {
  Issuer
  Specified
}

"""snapshot measuring cornjob"""
type Timer {
  """schedule type"""
  schedule: ScheduleType!

  """Every x hour"""
  hour: Int

  """Time of day"""
  timeOfDay: Int

  """next evaluation time of this schedule task"""
  nextTriggerTime: DateTime

  """related page ids"""
  pageIds: [Int!]!

  """related profile ids"""
  profileIds: [Int!]!

  """related environment ids"""
  envIds: [Int!]!

  """
  whether only specific pages/profiles/envs will be measured when task triggered
  """
  monitorType: ScheduleMonitorType!
}

enum ScheduleType {
  Off
  Daily
  Hourly
  EveryXHour
}

enum ScheduleMonitorType {
  All
  Specified
}

"""source code performance issue found"""
type SourceIssue {
  id: Int!

  """git commit hash"""
  hash: String!

  """source snapshot report id"""
  snapshotReportId: Int!

  """issue code"""
  code: String!

  """issue frame key, formatted in functionName:FilePath:line:col"""
  frameKey: String!

  """extra information to description given issue"""
  info: JSON!

  """issue created timestamp"""
  createdAt: DateTime!
  snapshotReport: SnapshotReport!
}

"""project scope jobs binding with artifacts/lab/source tasks"""
type Job {
  jobType: JobType!
  createdAt: DateTime!
  startedAt: DateTime
  endedAt: DateTime
  duration: Int
  status: JobStatus!
  trace(after: Int = -1): JobTrace!
}

enum JobStatus {
  Pending
  Running
  Done
  Canceled
  Failed
}

type AccessToken {
  name: String!
  createdAt: DateTime!
  lastUsedAt: DateTime!
}

"""Application version information"""
type AppVersion {
  id: Int!

  """commit hash"""
  hash: String!

  """commit message"""
  commitMessage: String

  """pull request number"""
  pr: Int

  """git branch"""
  branch: String

  """git tag"""
  version: String

  """version release exempted"""
  exempted: Boolean!

  """reason for exempting release"""
  exemptedReason: String

  """created time"""
  createdAt: DateTime!
}

"""runner register tokens and information"""
type Runner {
  id: ID!
  name: String!

  """specific job type the runner will consume"""
  jobType: JobType!

  """last runner contacted timestamp"""
  contactedAt: DateTime!

  """whether runner is in active status"""
  active: Boolean!

  """runner version"""
  version: String!

  """the version of node runner running on"""
  nodeVersion: String!

  """runner platform"""
  platform: String!

  """runner arch"""
  arch: String!

  """zone info of runner"""
  zone: String!

  """extra runner information from register"""
  extra: JSON

  """created timestamp"""
  createdAt: DateTime!
  runningJobs: [Job!]!
  runningJobCount: Int!
  maxJobConcurrency: Int!
  online: Boolean!
}

"""runner script"""
type RunnerScript {
  """runner script version, follow the semantic versioning spec"""
  version: String!
  description: String
  sha256: String!
  jobType: JobType!

  """runner script zipped package key in storage"""
  storageKey: String!

  """size in bytes"""
  size: Int!

  """created timestamp"""
  createdAt: DateTime!
  enable: Boolean!
}

type Webhook {
  id: ID!

  """the url will receive the webhook requests"""
  url: String!
  secret: String
  method: String!
  eventType: String!
  lastDelivery: DeliveryRecord
}

type Group {
  """
  group unique id, contains only lowercase letters "a-z", numbers "0-9", hyphen "-", underscore "_"
  """
  id: ID!

  """group created timestamp"""
  createdAt: DateTime!

  """current user permission to this group"""
  userPermission: [Permission!]!

  """authorized users of this group"""
  authorizedUsers: [UserWithPermission!]!

  """projects in this group"""
  projects: [Project!]!
}

type Package {
  id: Int!

  """package name"""
  name: String!

  """package description"""
  description: String

  """package author"""
  keywords: [String!]

  """artifact created timestamp"""
  createdAt: DateTime!

  """artifact updated timestamp"""
  updatedAt: DateTime!
  bundles(
    pagination: PaginationInput = {first: 5}

    """git branch filter"""
    branch: String

    """hash filter"""
    hash: String
  ): PaginatedPackageBundles!
  projectId: ID!
}

type PackageBundle {
  id: Int!

  """package name"""
  name: String!

  """package version"""
  version: String!

  """git commit hash"""
  hash: String!

  """git branch"""
  branch: String!

  """user uploaded the build"""
  issuer: String!

  """status of bundle analyzing progress"""
  status: BundleJobStatus!

  """reason for failed analyzing"""
  failedReason: String

  """total size introduced by build, report and content files, in bytes"""
  uploadSize: Int!

  """size of the entrypoint"""
  size: FileSize

  """time spent to analyze the build"""
  duration: Int!

  """has size effects"""
  hasSideEffects: Boolean

  """has js module"""
  hasJSModule: Boolean

  """has js next"""
  hasJSNext: Boolean

  """is module type"""
  isModuleType: Boolean

  """artifact created timestamp"""
  createdAt: DateTime!

  """artifact updated timestamp"""
  updatedAt: DateTime!
  appVersion: AppVersion

  """package iid"""
  packageId: Int!

  """the link to build analysis report file"""
  reportLink: String

  """the link to build benchmark report file"""
  benchmarkLink: String

  """the link to uploaded build tar file"""
  buildLink: String
}

type PageInfo {
  totalCount: Int!
  hasNextPage: Boolean!
  endCursor: String
}

type SearchUserResult {
  username: String!
  email: String!
  avatarUrl: String!
}

type Account {
  provider: ExternalAccount!
  externUsername: String
}

type GithubRepository {
  id: Int!
  name: String!
  full_name: String!
  private: Boolean!
  default_branch: String!
}

type GithubRepositoryEdge {
  cursor: String!
  node: GithubRepository!
}

type PaginatedGithubRepositories {
  edges: [GithubRepositoryEdge!]!
  pageInfo: PageInfo!
}

type GithubAccount {
  login: String!
  avatar_url: String!
  type: String!
}

type GithubInstallation {
  id: Int!
  account: GithubAccount!
}

type GithubRepoVerificationResult {
  ok: Boolean!
  error: String
}

type GithubInstallationEdge {
  cursor: String!
  node: GithubInstallation!
}

type PaginatedGithubInstallations {
  edges: [GithubInstallationEdge!]!
  pageInfo: PageInfo!
}

type Zone {
  """all available geo locations"""
  all: [String!]!

  """default geo location"""
  default: String!
}

type UserWithPermission {
  username: String!
  email: String!
  firstName: String
  lastName: String
  avatarUrl: String

  """issue created timestamp"""
  createdAt: DateTime!

  """is application"""
  isApp: Boolean!
  isAdmin: Boolean!
  starredProjects: [ID!]!
  connectedAccounts: [Account!]!
  accessTokens: [AccessToken!]!

  """user permission of project"""
  permission: Permission!
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

type PaginatedProjects {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectIdVerificationResult {
  ok: Boolean!
  error: String
}

type ProjectUsage {
  """storage usage in MB"""
  storage: Float!

  """job count usage"""
  jobCount: Float!

  """job time usage in minutes"""
  jobDuration: Float!
}

type RunnerEdge {
  cursor: String!
  node: Runner!
}

type PaginatedRunners {
  edges: [RunnerEdge!]!
  pageInfo: PageInfo!
}

type JobAggregation {
  jobType: JobType!
  count: Int!
}

type CategoryDateTimeUsage {
  jobType: JobType!
  data: JSON!
}

type TimeUsage {
  """The total time usage in ms"""
  total: Int!
  detail: [CategoryDateTimeUsage!]!
}

type JobTrace {
  hasMore: Boolean!
  logs: JSON!
  endCursor: Int!
}

type ArtifactEdge {
  cursor: String!
  node: Artifact!
}

type PaginatedArtifacts {
  edges: [ArtifactEdge!]!
  pageInfo: PageInfo!
}

type PageRelation {
  """page id"""
  pageId: Int!

  """related profile ids"""
  profileIds: [Int!]!

  """related environment ids"""
  envIds: [Int!]!

  """related competitor page ids"""
  competitorIds: [Int!]!
}

type PingResult {
  """pageId-profileId-envId"""
  key: String!

  """ping status"""
  status: String
}

type ConnectionType {
  id: String!
  title: String!
  download: Int!
  upload: Int!
  latency: Int!
  rtt: Int!
}

type DeviceType {
  id: String!
  value: String!
}

type SourceIssueEdge {
  cursor: String!
  node: SourceIssue!
}

type PaginatedSourceIssues {
  edges: [SourceIssueEdge!]!
  pageInfo: PageInfo!
}

type SnapshotEdge {
  cursor: String!
  node: Snapshot!
}

type PaginatedSnapshots {
  edges: [SnapshotEdge!]!
  pageInfo: PageInfo!
}

type CreateApplicationResult {
  application: Application!
  token: String!
}

type ApplicationProject {
  """project id"""
  id: ID!

  """repository namespace"""
  namespace: String!

  """repository name"""
  name: String!

  """repository host"""
  host: GitHost!
}

type ProjectAuthorizedApplicationsNode {
  app: Application!
  permissions: [Permission!]!
}

type ApplicationAuthorizedProjectsNode {
  project: ApplicationProject!
  permissions: [Permission!]!
}

type ApplicationEdge {
  cursor: String!
  node: Application!
}

type PaginatedApplications {
  edges: [ApplicationEdge!]!
  pageInfo: PageInfo!
}

type DeliveryRecord {
  startTime: DateTime!
  endTime: DateTime!
  statusCode: Int
  isSuccess: Boolean!
  deliveryId: ID!
}

type ScoreItem {
  minScore: Int
  maxScore: Int
  averageScore: Float
}

type AvgMetricType {
  """performance score"""
  score: Float
  FCP: Float
  FMP: Float
  LCP: Float
  SI: Float
  TBT: Float
  TTI: Float
  MPFID: Float
  CLS: Float
  WS: Float
}

type GroupEdge {
  cursor: String!
  node: Group!
}

type PaginatedGroups {
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}

type GroupIdVerificationResult {
  ok: Boolean!
  error: String
}

type PackageEdge {
  cursor: String!
  node: Package!
}

type PaginatedPackages {
  edges: [PackageEdge!]!
  pageInfo: PageInfo!
}

type PackageBundleEdge {
  cursor: String!
  node: PackageBundle!
}

type PaginatedPackageBundles {
  edges: [PackageBundleEdge!]!
  pageInfo: PageInfo!
}

"""message target setting"""
input MessageTargetInput {
  userEmails: [String!]!
}

type Query {
  maintenanceMode: Boolean!

  """get project by id"""
  project(id: ID!): Project!

  """Verify that the project id is available"""
  verifyProjectId(id: ID!): ProjectIdVerificationResult!

  """get project by repo"""
  projectsByRepo(
    """codebase host"""
    host: GitHost!

    """codebase namespace"""
    namespace: String!

    """codebase repo name"""
    name: String!
  ): [Project!]!

  """paginated projects"""
  projects(
    pagination: PaginationInput = {first: 10}

    """filter your starred projects"""
    starred: Boolean = false

    """search project with git namespace/name"""
    query: String

    """filter project with permission"""
    permission: Permission
  ): PaginatedProjects!
  user: User
  searchUsers(query: String!): [SearchUserResult!]!

  """
  Get installation by the github account connected with the current user. Throws if user is not connected to github account.
  """
  githubInstallation: GithubInstallation

  """
  List all installations associated with the github account connected by the current user, include joined organizations. Throws if user is not connected to github account. 
  NOTE: Limited by github endpoint, pagination.skip must be a multiple of pagination.first for this function. pagination.after is not supported.
  """
  associatedGithubInstallations(pagination: PaginationInput = {first: 10, skip: 0}): PaginatedGithubInstallations!

  """
  Verify that the github project exists and the current user has permissions to the project. Throws if user is not connected to github account.
  """
  verifyGithubRepositoryPermission(owner: String!, repo: String!): GithubRepoVerificationResult!

  """
  Search github repositories in the installation.
  Throws if user is not connected to github account.
  NOTE: Limited by github endpoint, pagination.skip must be a multiple of pagination.first for this function. pagination.after is not supported.
  """
  githubSearchRepositories(installationId: Int!, query: String!, pagination: PaginationInput = {first: 10, skip: 0}): PaginatedGithubRepositories!
  pendingJobsAggregation: [JobAggregation!]!
  runner(id: ID!): Runner!
  runners(filter: RunnerQueryFilter!): PaginatedRunners!

  """paginated packages"""
  packages(
    pagination: PaginationInput = {first: 10}

    """filter your starred packages"""
    starred: Boolean = false

    """search packages with name"""
    query: String

    """filter packages with permission"""
    permission: Permission
  ): PaginatedPackages!

  """get package bundle by id"""
  packageBundle(
    """project id"""
    projectId: ID!

    """package id"""
    packageId: ID!

    """package bundle id"""
    id: ID
  ): PackageBundle!

  """get package bundle history"""
  packageBundleHistory(
    """project id"""
    projectId: ID!
    packageId: ID!
    to: DateTime!
    limit: Int
    branch: String
  ): [PackageBundle!]!
  connections: [ConnectionType!]!
  devices: [DeviceType!]!
  availableOAuthProviders: [ExternalAccount!]!
  application(id: Int, name: String): Application!
  applications(pagination: PaginationInput = {first: 10}): PaginatedApplications!
  applicationSettings: ApplicationSettings!
  zone: Zone!
  runnerScripts(jobType: JobType!): [RunnerScript!]!
  activatedRunnerScripts(jobType: JobType!): RunnerScript
  allUsagePacks: [UsagePack!]!
  publicUsagePacks: [UsagePack!]!

  """get group by id"""
  group(id: ID!): Group!

  """Verify that the group id is available"""
  verifyGroupId(id: ID!): GroupIdVerificationResult!

  """paginated groups"""
  groups(
    pagination: PaginationInput = {first: 10}

    """search group"""
    query: String
  ): PaginatedGroups!
}

input RunnerQueryFilter {
  """returns the first n elements from the list."""
  first: Int = 10

  """ignore the first n elements from the list."""
  skip: Int = 0

  """returns the elements in the list that come after the specified cursor."""
  after: String

  """filter runners with specific job type"""
  jobType: JobType

  """filter runners with zone"""
  zone: String

  """filter runners with status"""
  active: Boolean

  """filter runners with online status"""
  online: Boolean
}

type Mutation {
  setMaintenanceMode(isOpen: Boolean!): Boolean!
  createProject(input: CreateProjectInput!): Project!
  updateProject(projectId: ID!, input: UpdateProjectInput!): Project!
  addProjectOwner(projectId: ID!, email: String!): Boolean!
  updateProjectUserPermission(projectId: ID!, email: String!, permission: Permission!, isAdd: Boolean!): Boolean!
  toggleStarProject(projectId: ID!, star: Boolean!): Boolean!

  """
  Delete project with given id. NOTE: all data in this project will be deleted.
  """
  deleteProject(projectId: ID!): Boolean!
  assignAdmin(email: String!): Boolean!
  disconnectAccount(provider: ExternalAccount!): Boolean!

  """trigger artifact bundle analyze job"""
  dispatchArtifactJob(
    projectId: ID!

    """artifact id"""
    id: Int!
  ): Boolean!
  deleteArtifact(projectId: ID!, artifactId: Int!): Boolean!
  updateRunner(id: ID!, input: UpdateRunnerInput!): Runner!
  deleteRunner(id: ID!): Boolean!

  """update project settings"""
  updateProjectSettings(projectId: ID!, input: UpdateSettingInput!): Setting!
  deletePackageBundle(
    projectId: ID!
    packageId: Int!

    """pakcage bundle id"""
    id: Int!
  ): Boolean!

  """trigger artifact bundle analyze job"""
  dispatchPackageJob(
    projectId: ID!

    """package id"""
    packageId: Int!

    """package bundle id"""
    id: Int!
  ): Boolean!

  """delete snapshot"""
  deleteSnapshot(projectId: ID!, snapshotId: Int!): Boolean!
  takeSnapshot(projectId: ID!, pageIds: [Int!], profileIds: [Int!], envIds: [Int!], title: String, commitHash: String): Snapshot!
  pingConnection(projectId: ID!, pageId: Int!, profileId: Int, envId: Int): Boolean!
  takeTempSnapshot(projectId: ID!, url: String!, profileIds: [Int!]!, envId: Int!, title: String): Snapshot!
  dispatchSnapshotReport(projectId: ID!, snapshotReportId: Int!): Boolean!

  """
  Set the commit hash associated with the snapshot, and the associated version cannot be modified. If the status of the snapshot is not completed will throw an error.
  """
  setSnapshotHash(projectId: ID!, snapshotId: Int!, hash: String!): Boolean!
  createPage(projectId: ID!, input: CreatePageInput!): Page!
  updatePage(projectId: ID!, input: UpdatePageInput!): Page!

  """
  Delete page with given id. NOTE: all snapshot report having the same page id will be deleted as well.
  """
  deletePage(projectId: ID!, pageId: Int!): Boolean!
  deleteSnapshotReport(projectId: ID!, snapshotReportId: Int!): Boolean!

  """update environment"""
  updateEnvironment(projectId: ID!, input: UpdateEnvironmentInput!): Environment!

  """
  Delete environment with given id. NOTE: All snapshot reports with same environment id will be deleted as well.
  """
  deleteEnvironment(
    projectId: ID!

    """id of environment to be deleted"""
    envId: Int!
  ): Boolean!

  """create or update profile if id exists"""
  updateOrCreateProfile(projectId: ID!, input: UpdateProfileInput!): Profile!

  """
  Delete profile with given id. NOTE: all snapshot report having the same profile id will be deleted as well.
  """
  deleteProfile(projectId: ID!, profileId: Int!): Boolean!
  generateToken(name: String!): String!
  deleteToken(name: String!): Boolean!

  """update project schedule task setting"""
  updateTimer(projectId: ID!, input: UpdateTimerInput!): Timer!
  createApplication(name: String!): CreateApplicationResult!
  authorizeApplication(projectId: ID!, applicationId: Int!, permissions: [Permission!]!): Boolean!
  updateApplicationPermissions(projectId: ID!, applicationId: Int!, permissions: [Permission!]!): [Permission!]!
  revokeApplicationPermissions(projectId: ID!, applicationId: Int!): Boolean!
  resetRegistrationToken: String!
  insertAvailableJobZones(zones: [String!]!): [String!]!
  deleteAvailableJobZones(zones: [String!]!): [String!]!
  setDefaultJobZone(zone: String!): String!
  updateApplicationSettings(settings: UpdateApplicationSettingsInput!): ApplicationSettings!
  updateRunnerScript(jobType: JobType!, version: String!, input: UpdateRunnerScriptInput!): RunnerScript!
  createUsagePack(input: CreateUsagePackInput!): UsagePack!
  updateUsagePack(input: UpdateUsagePackInput!): UsagePack!
  setDefaultUsagePack(id: Int!): Boolean!
  createWebhookForProject(projectId: ID!, input: WebhookInput!): Webhook!
  createWebhookForApplication(applicationId: Int!, input: WebhookInput!): Webhook!
  updateWebhook(id: ID!, input: WebhookInput!): Webhook!
  deleteWebhook(id: ID!): Boolean!
  createGroup(input: CreateGroupInput!): Group!
  addGroupOwner(groupId: ID!, email: String!): Boolean!
  updateGroupProject(groupId: ID!, projectId: String!, isAdd: Boolean!): Project!
  updateGroupUserPermission(groupId: ID!, email: String!, permission: Permission!, isAdd: Boolean!): Boolean!

  """
  Delete group with given id. NOTE: all data in this group will be deleted.
  """
  deleteGroup(groupId: ID!): Boolean!
}

input CreateProjectInput {
  host: GitHost!
  namespace: String!
  name: String!
  id: String!
  artifactBaselineBranch: String!
}

input UpdateProjectInput {
  artifactBaselineBranch: String

  """project visibility"""
  isPublic: Boolean
}

input UpdateRunnerInput {
  name: String

  """specific job type the runner will consume"""
  jobType: JobType

  """whether runner is in active status"""
  active: Boolean
}

input UpdateSettingInput {
  """what kind of source of bundle message would be sent"""
  bundleMessageSource: BundleMessageSource

  """what kind of bundle message would be sent"""
  bundleMessageFilter: BundleMessageFilter

  """branches where message should be sent if"""
  bundleMessageBranches: [String!]

  """deprecated"""
  autoDetectVersion: Boolean

  """what kind of lab message would be sent"""
  labMessageSource: LabMessageSource

  """what kind of chat will receive message"""
  messageTargetType: MessageTargetType

  """who will receive message if target type is specified"""
  messageTarget: MessageTargetInput
  owners: [String!]
}

input CreatePageInput {
  """page alias name"""
  name: String

  """page url"""
  url: String

  """is competitor page"""
  isCompetitor: Boolean

  """is temporary page"""
  isTemp: Boolean

  """is e2e test"""
  isE2e: Boolean

  """e2e script"""
  e2eScript: String

  """Disable scanning of this page"""
  disable: Boolean

  """page related profile ids"""
  profileIds: [Int!]!

  """page related environment ids"""
  envIds: [Int!]!

  """page related competitor page ids"""
  competitorIds: [Int!]!

  """
  used to automatically connect competitor page to existing page. only available when `isCompetitor` set `true`
  """
  connectPageId: Int
}

input UpdatePageInput {
  """page alias name"""
  name: String

  """page url"""
  url: String

  """is competitor page"""
  isCompetitor: Boolean

  """is temporary page"""
  isTemp: Boolean

  """is e2e test"""
  isE2e: Boolean

  """e2e script"""
  e2eScript: String

  """Disable scanning of this page"""
  disable: Boolean

  """page related profile ids"""
  profileIds: [Int!]

  """page related environment ids"""
  envIds: [Int!]

  """page related competitor page ids"""
  competitorIds: [Int!]

  """
  used to automatically connect competitor page to existing page. only available when `isCompetitor` set `true`
  """
  connectPageId: Int
  id: Int!
}

input UpdateEnvironmentInput {
  id: Int

  """environment alias name"""
  name: String

  """the geo location where the related pages should be audited at"""
  zone: String

  """
  tells whether this environment could be used in temporary pages and competitor pages auditing
  """
  isCompetitor: Boolean

  """Filtering environments when executing timed reminder tasks"""
  needReminder: Boolean

  """Disable scanning of this environment"""
  disable: Boolean

  """login script"""
  loginScript: String
  localStorage: [LocalStorageInputType!]
  cookies: [CookieInputType!]
  headers: [HeaderInputType!]
}

input LocalStorageInputType {
  key: String!
  value: String!
}

input CookieInputType {
  name: String!
  value: String!
  domain: String
  path: String
  httpOnly: Boolean!
  secure: Boolean!
  expire: String
  sameSite: String! = "Lax"
}

input HeaderInputType {
  key: String!
  value: String!
  host: String!
}

input UpdateProfileInput {
  id: Int

  """profile alias name"""
  name: String

  """simulator device name"""
  device: String

  """bandwidth limit"""
  bandWidth: String

  """Enable react prfiling"""
  reactProfiling: Boolean

  """Disable scanning of this profile"""
  disable: Boolean

  """Enable http2 + https proxy server"""
  enableProxy: Boolean
}

input UpdateTimerInput {
  """schedule type"""
  schedule: ScheduleType

  """Every x hour"""
  hour: Int

  """Time of day"""
  timeOfDay: Int

  """related page ids"""
  pageIds: [Int!]

  """related profile ids"""
  profileIds: [Int!]

  """related environment ids"""
  envIds: [Int!]

  """
  whether only specific pages/profiles/envs will be measured when task triggered
  """
  monitorType: ScheduleMonitorType
}

input UpdateApplicationSettingsInput {
  enableSignup: Boolean
  enableOauth: Boolean
  enableProjectCreate: Boolean
  enableProjectDelete: Boolean
  enableProjectImport: Boolean
  usePendingJobTable: Boolean
}

input UpdateRunnerScriptInput {
  enable: Boolean
}

input CreateUsagePackInput {
  """name of the usage pack"""
  name: String!
  desc: String!

  """whether the usage pack is public"""
  isPublic: Boolean!

  """job count quota within one month, -1 means no limit"""
  jobCountMonthly: Int!

  """
  job cost duration time quota within one month, in minute, -1 means no limit
  """
  jobDurationMonthly: Int!

  """total storage quota, in MB, -1 means no limit"""
  storage: Int!
}

input UpdateUsagePackInput {
  """name of the usage pack"""
  name: String
  desc: String

  """whether the usage pack is public"""
  isPublic: Boolean

  """job count quota within one month, -1 means no limit"""
  jobCountMonthly: Int

  """
  job cost duration time quota within one month, in minute, -1 means no limit
  """
  jobDurationMonthly: Int

  """total storage quota, in MB, -1 means no limit"""
  storage: Int
  id: Int!
}

input WebhookInput {
  url: String!
  secret: String
  method: String!
  eventType: String!
}

input CreateGroupInput {
  id: String!

  """project slug"""
  projectIds: [String!]!
}